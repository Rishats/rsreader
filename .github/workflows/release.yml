name: Build and Release

on:
  push:
    tags:
      - 'v*.*.*'  # Triggers on version tags

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        go-version: [1.22]
        os: [ubuntu-latest, windows-latest, macos-latest]
        arch: [amd64, arm, arm64]
        exclude:
          - os: macos-latest
            arch: arm  # Exclude unsupported darwin/arm combination

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ matrix.go-version }}

      - name: Set GOOS and GOARCH
        run: |
          if [ "${{ matrix.os }}" == "windows-latest" ]; then
            echo "GOOS=windows" >> $GITHUB_ENV
          elif [ "${{ matrix.os }}" == "macos-latest" ]; then
            echo "GOOS=darwin" >> $GITHUB_ENV
          else
            echo "GOOS=linux" >> $GITHUB_ENV
          fi
          echo "GOARCH=${{ matrix.arch }}" >> $GITHUB_ENV

      - name: Build
        run: |
          echo "Building for GOOS=${GOOS} GOARCH=${GOARCH}"
          output_name=rsreader-${GOOS}-${GOARCH}
          if [ "${GOOS}" == "windows" ]; then
            output_name=${output_name}.exe
          fi
          go build -v -o $output_name
          ls -la
          pwd

      - name: Archive build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: rsreader-${{ env.GOOS }}-${{ env.GOARCH }}
          path: rsreader-${{ env.GOOS }}-${{ env.GOARCH }}*

  release:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Download all build artifacts
        uses: actions/download-artifact@v3
        with:
          name: |
            rsreader-linux-amd64,
            rsreader-linux-arm,
            rsreader-linux-arm64,
            rsreader-windows-amd64,
            rsreader-windows-arm,
            rsreader-windows-arm64,
            rsreader-darwin-amd64,
            rsreader-darwin-arm64
          path: ./artifacts

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload Release Assets
        run: |
          for file in ./artifacts/*; do
            asset_name=$(basename $file)
            echo "Uploading $asset_name"
            gh release upload ${{ github.ref }} "$file" --clobber
          done
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}